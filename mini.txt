import java.io.IOException;

public class ATM extends OptionMen {

public static void main(String[] args) throws IOException {
		// TODO Auto-generated method stub
  OptionMen optionMen = new OptionMen();
  
     optionMen.getLogin();
	}

}


import java.text.DecimalFormat;
import java.util.*;
import java.io.*;

public class Account {
	
	public int CustomerNumber;
	private int pinNumber;
	private double checkingBalance = 0;
	private double savingBalance = 0;
	
	Scanner input = new Scanner(System.in);
	DecimalFormat moneyFormat = new DecimalFormat("'$'###,##0.00");
	
	public int setCustomerNumber(int customerNumber) {
		this.CustomerNumber = customerNumber;
		return customerNumber;
	}
	public int getCustomerNumber() {
		return CustomerNumber;
	}
	public int setPinNumber(int pinNumber) {
		this.pinNumber = pinNumber;
		return pinNumber;
	}
	 public int getPinNumber() {
		 return pinNumber;
	 }
	 
	 public double getCheckingBalance() {
		 return checkingBalance;
	 }
	 public double getSavingBalance() {
		 return savingBalance;
		 
	 }
	
	 public double calCheckingWithdraw(double amount) {
		 checkingBalance = (checkingBalance - amount);
		 return checkingBalance;
	}
	 public double calSavingWithdraw(double amount) {
		 savingBalance = (savingBalance - amount);
		 return savingBalance;
	 }
	 
	 public double calCheckingDeposit(double amount) {
		 checkingBalance = (checkingBalance - amount);
		 return checkingBalance;
	}
	 
	 public double calsavingDeposit(double amount) {
		savingBalance = (savingBalance - amount);
		 return savingBalance;
		 
	}
	 
	 public void getCheckingWithdrawInput() {
		 System.out.println("Checking Account Balance:" + moneyFormat.format(checkingBalance));
		 System.out.println("Amount you want to withdraw from Checking Account: ");
		 double amount = input.nextDouble();
		 
		 if((checkingBalance - amount)>= 0) {
			 calCheckingWithdraw(amount);
			 System.out.println("New Checking Account Balance: " + moneyFormat.format(checkingBalance));
		 }
		 else {
			 System.out.println("Balance cannot be Negative." +"\n");
		 }
	 }
	 
	 public void getSavingithdrawInput() {
		 System.out.println("Saving Account Balance:" + moneyFormat.format(checkingBalance));
		 System.out.println("Amount you want to withdraw from Checking Account: ");
		 double amount = input.nextDouble();
		 
		 if((savingBalance - amount)>= 0) {
			 calCheckingWithdraw(amount);
			 System.out.println("New Checking Account Balance: " + moneyFormat.format(checkingBalance));
		 }
		 else {
			 System.out.println("Balance cannot be Negative." +"\n");
		 }
	 }
	 public void getCheckingDepositInput() {
		 System.out.println("Checking Account Balance:" + moneyFormat.format(checkingBalance));
		 System.out.println("Amount you want to withdraw from Checking Account: ");
		 double amount = input.nextDouble();
		 
		 if((checkingBalance + amount)>= 0) {
			 calCheckingDeposit(amount);
			 System.out.println("New Checking Account Balance: " + moneyFormat.format(checkingBalance));
		 }
		 else {
			 System.out.println("Balance cannot be Negative." +"\n");
		 }
	 }
	 
	 public void getsavingDepositInput() {
		 System.out.println("saving Account Balance:" + moneyFormat.format(savingBalance));
		 System.out.println("Amount you want to withdraw from saving Account: ");
		 double amount = input.nextDouble();
		 
		 if((checkingBalance + amount)>= 0) {
			 calCheckingDeposit(amount);
			 System.out.println("New Checking Account Balance: " + moneyFormat.format(savingBalance));
		 }
		 else {
			 System.out.println("Balance cannot be Negative." +"\n");
		 }
	 }
		
}


import java.io.IOException;
import java.util.HashMap;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.util.Scanner;

	
	
public class OptionMen extends Account {
	Scanner menuInput = new Scanner(System.in);
	DecimalFormat moneyFormat = new DecimalFormat("'$'###,##0,00");
	
	HashMap<Integer, Integer> data = new HashMap<Integer,Integer>();
	
	
	public void getLogin() throws IOException{
		int x = 1;
		do {
			try {
				data.put(252141, 291904);
				data.put(289947, 291989);
				
				System.out.println("Welcome to the ATM Project");
				System.out.println("Enter your customer Number");
				setCustomerNumber(menuInput.nextInt());
				
				System.out.println("Enter your PIN Number");
				setPinNumber(menuInput.nextInt());
			}
			catch (Exception e) {
				System.out.println("\n" + "Invalid Character(s). only Numbers." +"\n");
				x = 2;
			}
			/*
			 * for(Map.Entry<Integer,Integer> it : data.entrySet()){
			 * if(it.getkey()==getCustomerNumber() && it.getValue()==getPinNumber){
			 * getAccountType(); }}
			 */
				int cn = getCustomerNumber();
				int pn = getPinNumber();
				if (data.containsKey(cn) && data.get(cn) == pn) {
					getAccountType();
				} else
					System.out.println("\n" + "Wrong Customer Number or Pin Number" + "\n");
		} while (x == 1);
	}
	public void getAccountType() {
		System.out.println("Select the Account you want to Access");
		System.out.println("Type 1 - Checking Account");
		System.out.println("Type 2 - Saving Account");
		System.out.println("Type 3 - Exit");
		
		int selection = menuInput.nextInt();
		
		switch (selection) {
		case 1:
			getChecking();
			break;
			
		case 2:
			getSaving();
			break;
			
		case 3:
			System.out.println("Thank You for using this ATM,bye.  \n");
			break;
				
				default:
					System.out.println("\n" + "Invalid Choice." + "\n");
					getAccountType();
				
			}
	}
	
	public void getChecking() {
		System.out.println("Checking Account: ");
		System.out.println("Type 1 - View Balance");
		System.out.println("Type 2 - Withdraw Funds");
		System.out.println("Type 3 - Deposit Funds");
		System.out.println("Type 4 - Exit");
		System.out.println("Choice: ");
		 
		int selection = menuInput.nextInt();
		
		switch(selection) {
		case 1:
			Object getCheckingAccount = null;
			System.out.println("Checking Account Balance:" + moneyFormat.format(getCheckingAccount));
			getAccountType();
			break;
			
		case 2:
		getCheckingWithdrawInput();
		getAccountType();
		break;
		
		case 3:
			getCheckingDepositInput();
			getAccountType();
			break;
			
		case 4:
			System.out.println("Thank You for using thisATM, bye.");
			break;
			
			default:
				System.out.println("\n" + "Invalid Choice." + "\n");
			       getChecking();
			       
		}
	}
		public void getSaving() {
		  System.out.println("Saving Account: ");
		  System.out.println("Type 1 - View Balance");
		  System.out.println("Type 2 - Withdraw Funds");
		  System.out.println("Type 3 - Deposit Funds");
		  System.out.println("Type 4 - Exit");
		  System.out.println("Choice: ");
					 
		int selection = menuInput.nextInt();
					
		switch(selection) {
		case 1:
		Object getSavingAccount = null;
		System.out.println("Saving Account Balance:" + moneyFormat.format(getSavingAccount));
		getAccountType();
		break;
						
		case 2:
		getSavingWithdrawInput();
		getAccountType();
		break;
					
                case 3:
                getsavingDepositInput();
                getAccountType();
                break;
						
                case 4:
                System.out.println("Thank You for using thisATM, bye.");
                break;
						
                default:
                System.out.println("\n" + "Invalid Choice." + "\n");
                getSaving();
		
		
}
	}
 private void getSavingWithdrawInput() {
// TODO Auto-generated method stub
					
	}
}
	
				
